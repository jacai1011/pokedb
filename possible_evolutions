import sys
import psycopg2
import helpers


### Globals
db = None
Pokemon_Name = None


### Command-line args
if len(sys.argv) != 2:
    print(f"Usage: {sys.argv[0]} <Pokemon Name>", file=sys.stderr)
    sys.exit(1)
Pokemon_Name = helpers.clean(sys.argv[1])


def get_postevolutions(name):
    cur = db.cursor()
    cur.execute("""
        SELECT Evolutions.Post_evolution FROM Evolutions
        JOIN Pokemon ON Pre_evolution = Pokemon.ID
        WHERE Pokemon.Name LIKE %s
    """, (name,))
    return [row[0] for row in cur.fetchall()]

def get_preevolutions(name):
    cur = db.cursor()
    cur.execute("""
        SELECT Evolutions.Pre_evolution FROM Evolutions
        JOIN Pokemon ON Post_evolution = Pokemon.ID
        WHERE Pokemon.Name LIKE %s
    """, (name,))
    return [row[0] for row in cur.fetchall()]

def get_Post_requirements(p_id):
    cur = db.cursor()
    cur.execute("""
        SELECT Assertion, Evolution_Requirements.Inverted FROM Requirements
        JOIN Evolution_Requirements ON Requirements.ID = Evolution_Requirements.Requirement
        JOIN Evolutions ON Evolutions.ID = Evolution_Requirements.Evolution
        JOIN Pokemon ON Post_evolution = Pokemon.ID
        WHERE Pokemon.ID = %s::pokemon_id
    """, (p_id,))
    return [row for row in cur.fetchall()]

def get_Pre_requirements(p_id):
    cur = db.cursor()
    cur.execute("""
        SELECT Assertion, Evolution_Requirements.Inverted FROM Requirements
        JOIN Evolution_Requirements ON Requirements.ID = Evolution_Requirements.Requirement
        JOIN Evolutions ON Evolutions.ID = Evolution_Requirements.Evolution
        JOIN Pokemon ON Pre_evolution = Pokemon.ID
        WHERE Pokemon.ID = %s::pokemon_id
    """, (p_id,))
    return [row for row in cur.fetchall()]

def get_name(p_id):
    cur = db.cursor()
    cur.execute("""
        SELECT Name FROM Pokemon
        WHERE Pokemon.ID = %s::pokemon_id
    """, (p_id,))
    result = cur.fetchone()
    return str(result[0])

def check_name(pokemon_name):
    cur = db.cursor()
    cur.execute("""
        SELECT Name FROM Pokemon
        WHERE Name LIKE %s
    """, (pokemon_name,))
    return cur.fetchall()
    
def find_repeats(list):
    count = {}
    for elem in list:
        if elem in count:
            count[elem] += 1
        else:
            count[elem] = 1
    return count

def main():
    if check_name(Pokemon_Name) == []:
        print(f"'{Pokemon_Name}' isn't a Pokemon that exists.", file=sys.stderr)
        return
    
    pre_ids = get_preevolutions(Pokemon_Name)
    post_ids = get_postevolutions(Pokemon_Name)
    OR_post_list = find_repeats(post_ids)
    OR_pre_list = find_repeats(pre_ids)

    for i in range(len(post_ids) - 1, 0, -1):
        if post_ids[i] == post_ids[i - 1]:
            del post_ids[i]
    for i in range(len(pre_ids) - 1, 0, -1):
        if pre_ids[i] == pre_ids[i - 1]:
            del pre_ids[i]

    if len(pre_ids) > 0:
        print(f"\n'{Pokemon_Name}' can evolve from:")
        for pre_id in pre_ids:
            print(f"	'{get_name(pre_id)}' when the following requirements are satisfied:")
            if OR_pre_list[pre_id] > 1 and len(get_Pre_requirements(pre_id)) == 2:
                if get_Pre_requirements(pre_id)[0][1] == False:
                    print(f"                        {get_Pre_requirements(pre_id)[0][0]}")
                else:
                    print(f"                        NOT {get_Pre_requirements(pre_id)[0][0]}")
                print('                OR')
                if get_Pre_requirements(pre_id)[0][1] == False:
                    print(f"                        {get_Pre_requirements(pre_id)[1][0]}\n")
                else:
                    print(f"                        NOT {get_Pre_requirements(pre_id)[1][0]}\n")

            elif OR_pre_list[pre_id] > 1:
                    c = 0
                    for req in get_Pre_requirements(pre_id):
                        c += 1
                        if c != len(get_Pre_requirements(pre_id)):
                            if req[1] == True:
                                print(f"                                NOT {req[0]}")
                            else:
                                print(f"                                {req[0]}")
                            if c == len(get_Pre_requirements(pre_id))/OR_pre_list[pre_id]:
                                print('                OR')
                            else:
                                print('                        AND')
                        else:
                            if req[1] == True:
                                print(f"                                NOT {req[0]}\n")
                            else:
                                print(f"                                {req[0]}\n")

            else:
                if len(get_Pre_requirements(pre_id)) == 1:
                    if get_Pre_requirements(pre_id)[0][1] == True:
                        print(f"                NOT {get_Pre_requirements(pre_id)[0][0]}\n")
                    else:
                        print(f"                {get_Pre_requirements(pre_id)[0][0]}\n")
                else:
                    c = 0
                    for req in get_Pre_requirements(pre_id):
                        c += 1
                        if c != len(get_Pre_requirements(pre_id)):
                            if req[1] == True:
                                print(f"                        NOT {req[0]}")
                            else:
                                print(f"                        {req[0]}")
                            print('                AND')
                        else:
                            if req[1] == True:
                                print(f"                        NOT {req[0]}\n")
                            else:
                                print(f"                        {req[0]}\n")
                        
    else:
        print(f"\n'{Pokemon_Name}' doesn't have any pre-evolutions.\n")
    if len(post_ids) > 0:
        print(f"'{Pokemon_Name}' can evolve into:")
        for post_id in post_ids:
            print(f"	'{get_name(post_id)}' when the following requirements are satisfied:")
            if OR_post_list[post_id] > 1 and len(get_Post_requirements(post_id)) == 2:
                if get_Post_requirements(post_id)[0][1] == False:
                    print(f"                        {get_Post_requirements(post_id)[0][0]}")
                else:
                    print(f"                        NOT {get_Post_requirements(post_id)[0][0]}")
                print('                OR')
                if get_Post_requirements(post_id)[0][1] == False:
                    print(f"                        {get_Post_requirements(post_id)[1][0]}\n")
                else:
                    print(f"                        NOT {get_Post_requirements(post_id)[1][0]}\n")
            elif OR_post_list[post_id] > 1:
                    c = 0
                    for req in get_Post_requirements(post_id):
                        c += 1
                        if c != len(get_Post_requirements(post_id)):
                            if req[1] == True:
                                print(f"                                NOT {req[0]}")
                            else:
                                print(f"                                {req[0]}")
                            if c == len(get_Post_requirements(post_id))/OR_post_list[post_id]:
                                print('                OR')
                            else:
                                print('                        AND')
                        else:
                            if req[1] == True:
                                print(f"                                NOT {req[0]}\n")
                            else:
                                print(f"                                {req[0]}\n")
            else:
                if len(get_Post_requirements(post_id)) == 1:
                    if get_Post_requirements(post_id)[0][1] == True:
                        print(f"                NOT {get_Post_requirements(post_id)[0][0]}\n")
                    else:
                        print(f"                {get_Post_requirements(post_id)[0][0]}\n")
                else:
                    c = 0
                    for req in get_Post_requirements(post_id):
                        c += 1
                        if c != len(get_Post_requirements(post_id)):
                            if req[1] == True:
                                print(f"                        NOT {req[0]}")
                            else:
                                print(f"                        {req[0]}")
                            print('                AND')
                        else:
                            if req[1] == True:
                                print(f"                        NOT {req[0]}\n")
                            else:
                                print(f"                        {req[0]}\n")
    else:        
        print(f"'{Pokemon_Name}' doesn't have any post-evolutions.\n")

if __name__ == '__main__':
    try:
        db = psycopg2.connect(dbname="ass2")
        main()
    except psycopg2.Error as err:
        print("DB error: ", err)
    except Exception as err:
        print("Internal Error: ", err)
        raise err
    finally:
        if db is not None:
            db.close()
    sys.exit(0)
